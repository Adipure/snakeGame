{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chanw\\\\Desktop\\\\code\\\\canvas-snake\\\\src\\\\game\\\\Game.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport Canvas from '../canvas/Canvas';\nimport draw from '../draw/draw';\nimport { GameWrapper, Score } from './Game.styles';\nimport useGameLogic from './useGameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let GameState;\n\n(function (GameState) {\n  GameState[GameState[\"RUNNING\"] = 0] = \"RUNNING\";\n  GameState[GameState[\"GAME_OVER\"] = 1] = \"GAME_OVER\";\n  GameState[GameState[\"PAUSED\"] = 2] = \"PAUSED\";\n})(GameState || (GameState = {}));\n\nconst Game = _ref => {\n  _s();\n\n  let {} = _ref;\n  const canvasRef = useRef(null);\n  const [gameState, setGameState] = useState(GameState.RUNNING);\n\n  const onGameOver = () => setGameState(GameState.GAME_OVER);\n\n  const {\n    snakeBody,\n    onKeyDownHandler,\n    foodPosition,\n    resetGameState\n  } = useGameLogic({\n    canvasHeight: 150,\n    canvasWidth: 300,\n    onGameOver,\n    gameState\n  });\n\n  const drawGame = ctx => {\n    draw({\n      ctx,\n      snakeBody,\n      foodPosition\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(GameWrapper, {\n    tabIndex: 0,\n    onKeyDown: onKeyDownHandler,\n    children: [/*#__PURE__*/_jsxDEV(Canvas, {\n      ref: canvasRef,\n      draw: drawGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), gameState === GameState.GAME_OVER ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setGameState(GameState.RUNNING);\n        resetGameState();\n      },\n      children: \"Play Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setGameState(gameState === GameState.RUNNING ? GameState.PAUSED : GameState.RUNNING);\n      },\n      children: gameState === GameState.RUNNING ? 'pause' : 'play'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Score, {\n      children: `Your score: ${(snakeBody.length - 1) * 10} `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"1EA/gwU1J/7EpWo+orNdDnHEkio=\", false, function () {\n  return [useGameLogic];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/chanw/Desktop/code/canvas-snake/src/game/Game.tsx"],"names":["React","useRef","useState","Canvas","draw","GameWrapper","Score","useGameLogic","GameState","Game","canvasRef","gameState","setGameState","RUNNING","onGameOver","GAME_OVER","snakeBody","onKeyDownHandler","foodPosition","resetGameState","canvasHeight","canvasWidth","drawGame","ctx","PAUSED","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,SAASC,WAAT,EAAsBC,KAAtB,QAAmC,eAAnC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAIA,WAAYC,SAAZ;;WAAYA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S;;AAMZ,MAAMC,IAAyB,GAAG,QAAQ;AAAA;;AAAA,MAAP,EAAO;AACxC,QAAMC,SAAS,GAAGT,MAAM,CAAoB,IAApB,CAAxB;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAYM,SAAS,CAACK,OAAtB,CAA1C;;AAEA,QAAMC,UAAU,GAAG,MAAMF,YAAY,CAACJ,SAAS,CAACO,SAAX,CAArC;;AAEA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,gBAAb;AAA+BC,IAAAA,YAA/B;AAA6CC,IAAAA;AAA7C,MACJZ,YAAY,CAAC;AACXa,IAAAA,YAAY,EAAE,GADH;AAEXC,IAAAA,WAAW,EAAE,GAFF;AAGXP,IAAAA,UAHW;AAIXH,IAAAA;AAJW,GAAD,CADd;;AAQA,QAAMW,QAAQ,GAAIC,GAAD,IAAmC;AAClDnB,IAAAA,IAAI,CAAC;AAAEmB,MAAAA,GAAF;AAAOP,MAAAA,SAAP;AAAkBE,MAAAA;AAAlB,KAAD,CAAJ;AACD,GAFD;;AAIA,sBACE,QAAC,WAAD;AAAa,IAAA,QAAQ,EAAE,CAAvB;AAA0B,IAAA,SAAS,EAAED,gBAArC;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,GAAG,EAAEP,SAAb;AAAwB,MAAA,IAAI,EAAEY;AAA9B;AAAA;AAAA;AAAA;AAAA,YADF,EAEGX,SAAS,KAAKH,SAAS,CAACO,SAAxB,gBACC;AACE,MAAA,OAAO,EAAE,MAAM;AACbH,QAAAA,YAAY,CAACJ,SAAS,CAACK,OAAX,CAAZ;AACAM,QAAAA,cAAc;AACf,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,gBAUC;AACE,MAAA,OAAO,EAAE,MAAM;AACbP,QAAAA,YAAY,CACVD,SAAS,KAAKH,SAAS,CAACK,OAAxB,GACIL,SAAS,CAACgB,MADd,GAEIhB,SAAS,CAACK,OAHJ,CAAZ;AAKD,OAPH;AAAA,gBASGF,SAAS,KAAKH,SAAS,CAACK,OAAxB,GAAkC,OAAlC,GAA4C;AAT/C;AAAA;AAAA;AAAA;AAAA,YAZJ,eAwBE,QAAC,KAAD;AAAA,gBAAS,eAAc,CAACG,SAAS,CAACS,MAAV,GAAmB,CAApB,IAAyB,EAAG;AAAnD;AAAA;AAAA;AAAA;AAAA,YAxBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD,CA9CD;;GAAMhB,I;UAOFF,Y;;;KAPEE,I;AAgDN,eAAeA,IAAf","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport Canvas from '../canvas/Canvas';\r\nimport draw from '../draw/draw';\r\nimport { GameWrapper, Score } from './Game.styles';\r\nimport useGameLogic from './useGameLogic';\r\n\r\ninterface GameProps {}\r\n\r\nexport enum GameState {\r\n  RUNNING,\r\n  GAME_OVER,\r\n  PAUSED,\r\n}\r\n\r\nconst Game: React.FC<GameProps> = ({}) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const [gameState, setGameState] = useState<GameState>(GameState.RUNNING);\r\n\r\n  const onGameOver = () => setGameState(GameState.GAME_OVER);\r\n\r\n  const { snakeBody, onKeyDownHandler, foodPosition, resetGameState } =\r\n    useGameLogic({\r\n      canvasHeight: 150,\r\n      canvasWidth: 300,\r\n      onGameOver,\r\n      gameState,\r\n    });\r\n\r\n  const drawGame = (ctx: CanvasRenderingContext2D) => {\r\n    draw({ ctx, snakeBody, foodPosition });\r\n  };\r\n\r\n  return (\r\n    <GameWrapper tabIndex={0} onKeyDown={onKeyDownHandler}>\r\n      <Canvas ref={canvasRef} draw={drawGame} />\r\n      {gameState === GameState.GAME_OVER ? (\r\n        <button\r\n          onClick={() => {\r\n            setGameState(GameState.RUNNING);\r\n            resetGameState();\r\n          }}\r\n        >\r\n          Play Again\r\n        </button>\r\n      ) : (\r\n        <button\r\n          onClick={() => {\r\n            setGameState(\r\n              gameState === GameState.RUNNING\r\n                ? GameState.PAUSED\r\n                : GameState.RUNNING\r\n            );\r\n          }}\r\n        >\r\n          {gameState === GameState.RUNNING ? 'pause' : 'play'}\r\n        </button>\r\n      )}\r\n      <Score>{`Your score: ${(snakeBody.length - 1) * 10} `}</Score>\r\n    </GameWrapper>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"]},"metadata":{},"sourceType":"module"}