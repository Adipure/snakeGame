{"ast":null,"code":"import { Direction } from './useGameLogic';\n\nconst createSnakeMovement = function () {\n  let gridSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n  return {\n    moveRight: snakeBody => {\n      const bodyCopy = [...snakeBody];\n      const headPos = bodyCopy[bodyCopy.length - 1];\n      bodyCopy.shift();\n      return [...bodyCopy, { ...headPos,\n        x: headPos.x + gridSize\n      }];\n    },\n    moveLeft: snakeBody => {\n      const bodyCopy = [...snakeBody];\n      const headPos = bodyCopy[bodyCopy.length - 1];\n      bodyCopy.shift();\n      return [...bodyCopy, { ...headPos,\n        x: headPos.x - gridSize\n      }];\n    },\n    moveDown: snakeBody => {\n      const bodyCopy = [...snakeBody];\n      const headPos = bodyCopy[bodyCopy.length - 1];\n      bodyCopy.shift();\n      return [...bodyCopy, { ...headPos,\n        y: headPos.y + gridSize\n      }];\n    },\n    moveUp: snakeBody => {\n      const bodyCopy = [...snakeBody];\n      const headPos = bodyCopy[bodyCopy.length - 1];\n      bodyCopy.shift();\n      return [...bodyCopy, { ...headPos,\n        y: headPos.y - gridSize\n      }];\n    }\n  };\n};\n\nexport const willSnakeHitTheFood = _ref => {\n  let {\n    foodPosition,\n    snakeHeadPosition,\n    direction\n  } = _ref;\n\n  switch (direction) {\n    case Direction.UP:\n      return foodPosition.x === snakeHeadPosition.x && snakeHeadPosition.y - 5 === foodPosition.y;\n\n    case Direction.DOWN:\n      return foodPosition.x === snakeHeadPosition.x && snakeHeadPosition.y + 5 === foodPosition.y;\n\n    case Direction.LEFT:\n      return foodPosition.y === snakeHeadPosition.y && snakeHeadPosition.x - 5 === foodPosition.x;\n\n    case Direction.RIGHT:\n      return foodPosition.y === snakeHeadPosition.y && snakeHeadPosition.x + 5 === foodPosition.x;\n  }\n};\nexport const hasSnakeEatenItself = snakeBody => {\n  if (snakeBody.length <= 1) {\n    return false;\n  }\n\n  const head = snakeBody[snakeBody.length - 1];\n  const body = snakeBody.slice(0, snakeBody.length - 1);\n  return body.some(segment => segment.x === head.x && segment.y === head.y);\n};\nexport default createSnakeMovement;","map":{"version":3,"sources":["C:/Users/chanw/Desktop/code/canvas-snake/src/game/movement.ts"],"names":["Direction","createSnakeMovement","gridSize","moveRight","snakeBody","bodyCopy","headPos","length","shift","x","moveLeft","moveDown","y","moveUp","willSnakeHitTheFood","foodPosition","snakeHeadPosition","direction","UP","DOWN","LEFT","RIGHT","hasSnakeEatenItself","head","body","slice","some","segment"],"mappings":"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","sourcesContent":["import { Direction, Position } from './useGameLogic';\r\n\r\nconst createSnakeMovement = (gridSize = 5) => ({\r\n  moveRight: (snakeBody: Position[]) => {\r\n    const bodyCopy = [...snakeBody];\r\n    const headPos = bodyCopy[bodyCopy.length - 1];\r\n    bodyCopy.shift();\r\n    return [...bodyCopy, { ...headPos, x: headPos.x + gridSize }];\r\n  },\r\n  moveLeft: (snakeBody: Position[]) => {\r\n    const bodyCopy = [...snakeBody];\r\n    const headPos = bodyCopy[bodyCopy.length - 1];\r\n    bodyCopy.shift();\r\n    return [...bodyCopy, { ...headPos, x: headPos.x - gridSize }];\r\n  },\r\n  moveDown: (snakeBody: Position[]) => {\r\n    const bodyCopy = [...snakeBody];\r\n    const headPos = bodyCopy[bodyCopy.length - 1];\r\n    bodyCopy.shift();\r\n    return [...bodyCopy, { ...headPos, y: headPos.y + gridSize }];\r\n  },\r\n  moveUp: (snakeBody: Position[]) => {\r\n    const bodyCopy = [...snakeBody];\r\n    const headPos = bodyCopy[bodyCopy.length - 1];\r\n    bodyCopy.shift();\r\n    return [...bodyCopy, { ...headPos, y: headPos.y - gridSize }];\r\n  },\r\n});\r\n\r\ninterface WillSnakeHitTheFoodArgs {\r\n  foodPosition: Position;\r\n  snakeHeadPosition: Position;\r\n  direction: Direction;\r\n}\r\n\r\nexport const willSnakeHitTheFood = ({\r\n  foodPosition,\r\n  snakeHeadPosition,\r\n  direction,\r\n}: WillSnakeHitTheFoodArgs) => {\r\n  switch (direction) {\r\n    case Direction.UP:\r\n      return (\r\n        foodPosition.x === snakeHeadPosition.x &&\r\n        snakeHeadPosition.y - 5 === foodPosition.y\r\n      );\r\n    case Direction.DOWN:\r\n      return (\r\n        foodPosition.x === snakeHeadPosition.x &&\r\n        snakeHeadPosition.y + 5 === foodPosition.y\r\n      );\r\n    case Direction.LEFT:\r\n      return (\r\n        foodPosition.y === snakeHeadPosition.y &&\r\n        snakeHeadPosition.x - 5 === foodPosition.x\r\n      );\r\n\r\n    case Direction.RIGHT:\r\n      return (\r\n        foodPosition.y === snakeHeadPosition.y &&\r\n        snakeHeadPosition.x + 5 === foodPosition.x\r\n      );\r\n  }\r\n};\r\n\r\nexport const hasSnakeEatenItself = (snakeBody: Position[]) => {\r\n  if (snakeBody.length <= 1) {\r\n    return false;\r\n  }\r\n\r\n  const head = snakeBody[snakeBody.length - 1];\r\n  const body = snakeBody.slice(0, snakeBody.length - 1);\r\n\r\n  return body.some((segment) => segment.x === head.x && segment.y === head.y);\r\n};\r\n\r\nexport default createSnakeMovement;\r\n"]},"metadata":{},"sourceType":"module"}